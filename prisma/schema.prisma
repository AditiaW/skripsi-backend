// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id               String    @id @default(uuid())
  name             String
  email            String    @unique
  password         String
  role             Role      @default(USER)
  resetToken       String?   @unique
  resetTokenExpiry DateTime?
  createdAt        DateTime  @default(now())
  updatedAt        DateTime  @updatedAt
  fcmToken         String?   @unique
  // Order Order[]
  Order            Order[]
}

enum Role {
  ADMIN
  USER
}

model Category {
  id        String    @id @default(nanoid(4))
  name      String
  products  Product[]
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}

model Product {
  id          String   @id @default(nanoid(5))
  name        String
  description String
  price       Int
  quantity    Int      @default(0)
  image       String
  category    Category @relation(fields: [categoryId], references: [id])
  categoryId  String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  OrderItem OrderItem[]
}

model Order {
  id              String        @unique
  orderItems      OrderItem[]
  shippingAddress String
  shippingCity    String
  shippingZip     String
  shippingPhone   String
  shippingNotes   String?
  totalAmount     Int
  paymentMethod   String?
  paymentStatus   PaymentStatus @default(PENDING)
  snapToken       String?       @unique
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt

  user   User   @relation(fields: [userId], references: [id])
  userId String
}

model OrderItem {
  id        String  @id @default(nanoid(5))
  order     Order   @relation(fields: [orderId], references: [id])
  orderId   String
  product   Product @relation(fields: [productId], references: [id])
  productId String
  quantity  Int
  price     Int // Harga saat checkout (untuk keperluan historis)
}

enum PaymentStatus {
  PENDING
  PAID
  FAILED
  EXPIRED
  CANCELED
}
